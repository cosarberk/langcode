import { FaissStore } from "@langchain/community/vectorstores/faiss";
import { OpenAIEmbeddings } from "@langchain/openai";
import { Document } from "@langchain/core/documents";
import { Logger } from "../../core";

export type FaissCreateConfig = {
  embeddings: OpenAIEmbeddings;
  documents: Document[];
  logger?: Logger;
};

export type FaissSaveConfig = {
  store: FaissStore;
  path: string;
  logger?: Logger;
};

export type FaissLoadConfig = {
  embeddings: OpenAIEmbeddings;
  path: string;
  logger?: Logger;
};

export async function createFaissStore(config: FaissCreateConfig): Promise<FaissStore> {
  try {
    config.logger?.log("üì¶ FAISS store olu≈üturuluyor...");
    const store = await FaissStore.fromDocuments(config.documents, config.embeddings);
    config.logger?.log("‚úÖ FAISS store olu≈üturuldu.");
    return store;
  } catch (err) {
    config.logger?.log("‚ùå FAISS store olu≈üturulurken hata:", err);
    throw err;
  }
}

export async function saveFaissStore(config: FaissSaveConfig): Promise<void> {
  try {
    config.logger?.log(`üíæ FAISS store '${config.path}' konumuna kaydediliyor...`);
    await config.store.save(config.path);
    config.logger?.log("‚úÖ FAISS store ba≈üarƒ±yla kaydedildi.");
  } catch (err) {
    config.logger?.log("‚ùå FAISS store kaydederken hata:", err);
    throw err;
  }
}

export async function loadFaissStore(config: FaissLoadConfig): Promise<FaissStore> {
  try {
    config.logger?.log(`üìÇ FAISS store '${config.path}' konumundan y√ºkleniyor...`);
    const store = await FaissStore.load(config.path, config.embeddings);
    config.logger?.log("‚úÖ FAISS store ba≈üarƒ±yla y√ºklendi.");
    return store;
  } catch (err) {
    config.logger?.log("‚ùå FAISS store y√ºklenirken hata:", err);
    throw err;
  }
}